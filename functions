#!/usr/bin/env bash

# Description ->
#
# |- Summary: Functions for bash environment
#             - Includes many functions that work better inside of bash
#
# |- Dependencies:
#             - fzf
#             - fdfind
#             - eza
#             - others depending on OS
#             - RilCritch's ansi_escape_sequences file

# Document Info ->
#
# |- Author: RilCritch
#
# |- Last Update: 02/11/2024

# Imports - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
. ${BASH_HOME}/ansi_escape_sequences
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


# Utilities {{{

## directory tests {{{{

# Check if argument for dir is empty or a valid dir
#  This function defaults to the $HOME dir
# |- Arg 1 is empty: dir -> $HOME
# |- Arg 1 is Dir:   dir -> $1
# |- Arg 1 is ! Dir: dir -> "" (empty string denotes failure)
get-dir-h() {
    if [[ -z "$1" ]]; then
        echo "${HOME}"
    else
        if [[ -d "$1" ]]; then
            echo "${1}"
        else
            echo ""
        fi
    fi
}
 
# Check if argument for dir is empty or a valid dir
#  This function defaults to the working directory
# |- Same as get-dir-c but default is current directory
get-dir-c() {
    if [[ -z "$1" ]]; then
        \pwd
    else
        if [[ -d "$1" ]]; then
            echo "${1}"
        else
            echo ""
        fi
    fi
}
# }}}}

## Tests {{{{

# Simple number test
# 0 -> is a number
# 1 -> not a number
is_number() {
    if [[ "$1" =~ ^-?[0-9]+$ ]]; then
        echo "0"
    else
        echo "1"
    fi
}

#}}}}

## Size Calculations {{{{

# Returns the recommended size of a tree
# |- If a non valid dir is specified pwd is used
tree-size() {
    # Arguments
    if [[ ! -d "${1}" ]]; then
        dir_name=$(\pwd)
    else
        dir_name="${1}"
    fi

    if [[ -z $2 ]]; then
        extra_lines="0"
    else
        if [[ "$2" =~ ^-?[0-9]+$ ]]; then
            extra_lines="$2"
        else
            extra_lines="0"
        fi
    fi

    term_height=$(tput lines)
    height=$((term_height - extra_lines))

    if [[ $(\eza -I=".git" -Ta -L=2  "$dir_name" | wc -l) -lt "$height" ]]; then
        echo "2"
    elif [[ $(\eza -I=".git" -Ta -L=1  "$dir_name" | wc -l) -lt "$height" ]]; then
        echo "1"
    else
        echo "0"
    fi
}

# }}}}

# }}}


# Directory Listing {{{

## Recursive {{{{

lsr() {
	local size="$1"

	# Default size of 2
	if [ -z "$size" ] || [ "$size" -le 0 ]; then
		size=2
	fi

	eza -R --icons -L="$size" --group-directories-first
}

clsr() {
	local size="$1"

	# Default size of 2
	if [ -z "$size" ] || [ "$size" -le 0 ]; then
		size=2
	fi

	clear
	eza -R --icons -L="$size" --group-directories-first
}

clsra() {
	local size="$1"
    local ignore="$2" # format "ignore1|ignore2|ignoreN"

	# Default size of 2
	if [ -z "$size" ] || [ "$size" -le 0 ]; then
		size=2
	fi

    # files to ignore
    if [ -z "$ignore" ]; then
        ignore=""
    else
        ignore="--ignore-glob='${2}'"
    fi

	clear
	eval eza -Ra --icons "$ignore" -L="$size" --group-directories-first
}
# }}}}

## Tree {{{{

lst() {
	local size="$1"

	# Default size of 2
	if [ -z "$size" ] || [ "$size" -le 0 ]; then
		size=2
	fi

	eza -T --icons -L="$size" --group-directories-first
}

clst() {
	local size="$1"

	# Default size of 2
	if [ -z "$size" ] || [ "$size" -le 0 ]; then
		size=2
	fi

	clear
	eza -T --icons -L="$size" --group-directories-first
}

clsta() {
	local size="$1"

	# Default size of 2
	if [ -z "$size" ] || [ "$size" -le 0 ]; then
		size=2
	fi

	clear
	eza -Ta --icons -L="$size" --group-directories-first
}
# }}}}

## In depth list outputs {{{{

# Directory overview
# |- Arg 1: Directory to list (must be valid dir, default: pwd)
# |- Arg 2: Integer specifying extra lines for eza height calculation
dir-overview() {
    # Arguments
    dir_name=$(get-dir-c "$1")
    if [[ -z "$dir_name" ]]; then
        echo -e "${red}ERROR: ${reset}Specified Directory ${blue}${1} ${reset}does not exist."
        return 2
    fi

    if [[ -n "${2}" && $(is_number "${2}") -eq 0 ]]; then
        input="${2}"
        extra_lines=$((input + 4))
    else
        extra_lines="4"
    fi

    # Data
    dir_path=$(realpath "${dir_name}")
    num_files=$(fdfind . "${dir_path}" -H --type f --max-depth 1 | wc -l)
    num_dirs=$(fdfind . "${dir_path}" -H --type d --max-depth 1 | wc -l)
    num_links=$(fdfind . "${dir_path}" -H --type l --max-depth 1 | wc -l)
    tree_height=$(tree-size "${dir_path}" "${extra_lines}")

    # output
    if [[ "$tree_height" -eq 0 ]]; then
        echo -en "${cyan} "
        echo -en "${bold}${dir_path}${reset} ${l_black}|"

        echo -en "${reset}  "
        echo -en "${dim} ${num_files}${reset} ${l_black}|"

        echo -en "${blue}  "
        echo -en "${dim} ${num_dirs}${reset} ${l_black}|"

        echo -en "${cyan}  "
        echo -e "${dim} ${num_links}"

        across-line | clr blackL

        eza -a --group-directories-first -I=".git" "$dir_path"
    else
        echo -en "${cyan}  "
        echo -en "${bold}${dir_path}${reset} ${l_black}|"

        echo -en "${reset}  "
        echo -en "${dim} ${num_files}${reset} ${l_black}|"

        echo -en "${blue}  "
        echo -en "${dim} ${num_dirs}${reset} ${l_black}|"

        echo -en "${cyan}  "
        echo -e "${dim} ${num_links}"

        dir_length=${#dir_path}
        files_length=${#num_files}
        dirs_length=${#num_dirs}
        links_length=${#num_links}

        linewidth=$((dir_length + files_length + dirs_length + links_length + 21))

        echo -e -n "${l_black}┍"
        for (( i=1 ; i<=linewidth; i++ )); do
            echo -n "━"
        done
        echo
	    eza -Ta -L="$tree_height" --group-directories-first -I=".git" "$dir_path" | awk 'NR > 1'
    fi
}
# }}}}

# }}}


# FZF cd {{{
#

dir-nav-fzf() {
    # Test for specified dir
    dir_name=$(get-dir-h "$1")
    if [[ -z "$dir_name" ]]; then
        echo -e "Specified Directory ${blue}${1}${reset} does not exist."
    fi

    dir_path=$(realpath "${dir_name}")

	choice=$(fdfind . "$dir_path" --type d | sed "s|${dir_path}/||" | fzf --border-label=" 󰥨 ${dir_path}/ " --preview "eza --tree -la --icons -F -L=2 --group-directories-first --no-filesize --no-user --no-time --no-permissions {}")

	if [ -n "$choice" ]; then
		cd "${dir_path}/${choice}" || return 2
		clear
	fi
}

dir-nav-fzf-hid() {
    # Test for specified dir
    dir_name=$(get-dir-h "$1")
    if [[ -z "$dir_name" ]]; then
        echo -e "Specified Directory ${blue}${1}${reset} does not exist."
    fi

    dir_path=$(realpath "${dir_name}")

	choice=$(fdfind . "$dir_path" -H --type d | sed "s|${dir_path}/||" | fzf --border-label=" 󰥨 ${dir_path}/ " --preview "eza --tree -la --icons -F -L=2 --group-directories-first --no-filesize --no-user --no-time --no-permissions {}")

	if [ -n "$choice" ]; then
		cd "${dir_path}/${choice}" || return 2
		clear
	fi
}

d () {
    # Test for directory path -> default to home
    dir_name=$(get-dir-h "$1")
    if [[ -z "${dir_name}" ]]; then
        echo -e "Specified Directory ${blue}${1}${reset} does not exist."
        echo "false"
        return 2
    fi
    dir_path=$(realpath "${dir_name}")

    choice="notempty"
    dir_traversal="false"

    # Run fzf to traverse directories
    while [[ -n "${choice}" ]]; do
        choice=$(fdfind . "$dir_path" -H --type d | sed "s|${dir_path}/||" | fzf --border-label=" 󰥨 ${dir_path}/ " --preview "eza --tree -l --icons -F -L=2 --group-directories-first --no-filesize --no-user --no-time --no-permissions ${dir_path}/{}")

        if [[ -n "${choice}" ]]; then
            dir_traversal="true"

            cd "${dir_path}/${choice}" || return 2

            dir_path=$(realpath "${dir_path}/${choice}")
            dir_number=$(fdfind . "${dir_path}" --type d --max-depth 1 | wc -l)

            # stop loop if ther are no more directories to traverse
            if [[ "${dir_number}" -le 0 ]]; then
                choice=""
            fi
        fi
    done

    # Print data if neccessary
    if [[ "${dir_traversal}" == "true" ]]; then
        clear

        # Git repo?
        repo_path=$(git rev-parse --show-toplevel 2> /dev/null)

        # account for extra height of script output
        if [[ -n "${repo_path}" ]]; then
            repo-header

            header_size=$(repo-header | wc -l)
            extra_lines=$((header_size + 1))
        else
            extra_lines=1
        fi

            dir-overview . "${extra_lines}"
            echo
    fi
}

# Fast cd to my repos
# r() {
# 	choice=$(\ls /home/rc/Repos/ | fzf --height=100% --header-first --border-label="  Git Repositories " --reverse --preview "eza --tree -l --icons -F -L=2 --group-directories-first --no-filesize --no-user --no-time --no-permissions ${HOME}/Repos/{}")
#
#     if [ -n "$choice" ]; then
#         base_dir="/home/rc/Repos/${choice}"
#         cd "${base_dir}" || return 2
#         clear
#
#         dir_number=$(fdfind . "${base_dir}" --type d --max-depth 1 | wc -l)
#         if [[ "$dir_number" -gt 0 ]]; then
#             dir-nav-fzf "${base_dir}"
#         fi
#
#         repo-header
#
#         header_size=$(repo-header | wc -l)
#         extra_lines=$((header_size + 1))
#
#         dir-overview . "${extra_lines}"
#         echo
#     fi
# }

# Fast cd through notes
n() {
	choice=$( fdfind . "$HOME/Repos/notes-ril" --type d | sed 's|/home/rc/Repos/notes-ril/||' | fzf --border-label=" 󰠮 Search Notes Directory " --header-first --reverse  --preview "eza --tree -la --icons -F -L=2 --group-directories-first --no-filesize --no-user --no-permissions --no-time ${HOME}/Repos/notes-ril/{}")

    if [ -n "$choice" ]; then
        cd "${HOME}/Repos/notes-ril/${choice}" || return 2
        clear

        dir-overview
    fi
}

# }}}


# FZF packages {{{

# debian packages
ddf() {
	choice=$(apt-cache -n search '.*' | awk -F ' - ' '{print $1}' | fzf --height=100% --header-first --reverse --prompt='▶ ' --pointer='󱦰' --multi --preview-window="down" --preview 'apt show {}')

	if [ -n "$choice" ]; then
		echo "Installing ${choice}" | clr cyan
	    sudo nala install --install-suggests "${choice}"
	fi

}

# pacman searching
pacf() {
	choice=$(pacman -Slq | fzf --header-first --reverse --prompt='▶ ' --pointer='󱦰' --preview 'pacman -Si {}')

	if [ -n "$choice" ]; then
		echo "Installing $choice" | clr green
		sudo pacman -S "${choice}"
	fi
}

# AUR searching
aurf() {
	choice=$(paru -a -Slq | fzf --header-first --reverse --prompt='▶ ' --pointer='󱦰' --preview 'paru -Si {}')

	if [ -n "$choice" ]; then
		echo "Installing $choice" | clr green
		paru "${choice}"
	fi
}

flatf() {
	choice=$(flatpak remote-ls flathub | awk '{ printf "%s %s\n", $1, $2, $3 }' | fzf --header-first --reverse --prompt='▶ ' --pointer='󱦰' --preview $'flatpak remote-info flathub "$(echo {} | awk \'{printf "%s", $2}\')"')

	if [ -n "$choice" ]; then
		echo "Installing $choice" | clr green
		# flatpak install flathub "${choice}"
	fi
}
# }}}


# Navigation {{{

# Moving up directories
up() {
	local d=""
	local limit="$1"

	# Default to limit of 1
	if [ -z "$limit" ] || [ "$limit" -le 0 ]; then
		limit=1
	fi

	for ((i = 1; i <= limit; i++)); do
		d="../$d"
	done

	# perform cd. Show error if cd fails
	if ! cd "$d"; then
		echo "Couldn't go up $limit dirs."
	fi
}
# }}}


# File Manipulation {{{

# EXtractor for all kinds of archives
# usage: ex <file>
ex() {
	if [ -f $1 ]; then
		case $1 in
		*.tar.bz2) tar xf $1 ;;
		*.tar.gz) tar xzf $1 ;;
		*.bz2) bunzip2 $1 ;;
		*.rar) unrar x $1 ;;
		*.gz) gunzip $1 ;;
		*.tar) tar xf $1 ;;
		*.tbz2) tar xf $1 ;;
		*.tgz) tar xzf $1 ;;
		*.zip) unzip $1 ;;
		*.Z) uncompress $1 ;;
		*.7z) 7z x $1 ;;
		*.deb) ar x $1 ;;
		*.tar.xz) tar xf $1 ;;
		*.tar.zst) tar xf $1 ;;
		*) echo "'$1' cannot be extracted via ex()" ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}
# }}}


# Vim options - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# vim: ts=4 sts=4 sw=4 et
# vim:fileencoding=utf-8:foldmethod=marker
