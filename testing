#!/usr/bin/env bash

# Description ->
#
# |- Summary:
#             - File for testing ideas for bashrc
#
# |- Usage: Place functions or other bash script to be sourced in bashrc
#

# Document Info ->
#
# |- Author: Riley Crtichfield
#
# |- Last Update: 02/10/2024


# |- Functions ->

## Testing New Functions {{{

# Testing Directory Access
# dir-test() {
#     if [[ -z "$1" ]]; then
#         dir="${HOME}"
#         echo "Dir set to default -> \$dir=${dir}"
#     else
#         if [[ -d "$1" ]]; then
#             dir="$1"
#             echo "Dir set to argument -> \$dir=${dir}"
#         else
#             echo "Dir not set as specified dir does not exist"
#             return 1
#         fi
#     fi
#     echo "end of function"
# }

# FZF Directory Navigation
dirtst () {
    # Test for directory path -> default to home
    dir_name=$(get-dir-h "$1")
    if [[ -z "${dir_name}" ]]; then
        echo -e "Specified Directory ${blue}${1}${reset} does not exist."
        echo "false"
        return 2
    fi
    dir_path=$(realpath "${dir_name}")

    choice="notempty"
    dir_traversal="false"

    # Run fzf to traverse directories
    while [[ -n "${choice}" ]]; do
        choice=$(fdfind . "$dir_path" --type d | sed "s|${dir_path}/||" | fzf --border-label=" 󰥨 ${dir_path}/ " --preview "eza --tree -la --icons -F -L=2 --group-directories-first --no-filesize --no-user --no-time --no-permissions {}")

        if [[ -n "${choice}" ]]; then
            dir_traversal="true"

            cd "${dir_path}/${choice}" || return 2

            dir_path=$(realpath "${dir_path}/${choice}")
            dir_number=$(fdfind . "${dir_path}" --type d --max-depth 1 | wc -l)

            # stop loop if ther are no more directories to traverse
            if [[ "${dir_number}" -le 0 ]]; then
                choice=""
            fi
        fi
    done

    # Print data if neccessary
    if [[ "${dir_traversal}" == "true" ]]; then
        clear

        # Git repo?
        repo_path=$(git rev-parse --show-toplevel 2> /dev/null)

        # account for extra height of script output
        if [[ -n "${repo_path}" ]]; then
            repo-header

            header_size=$(repo-header | wc -l)
            extra_lines=$((header_size + 1))
        else
            extra_lines=1
        fi

            dir-overview . "${extra_lines}"
            echo
    fi
}

# }}}

## Old and currently not in use {{{

# fast cd on root - verbose and clear screen
# dr() {
# 	sudo -v
# 	choice=$(sudo fdfind . / -type d | fzf --header-first --reverse --prompt='▶ ' --pointer='󱦰' --preview 'eza --tree -la --icons -F -L=2 --group-directories-first --no-filesize --no-user --no-time --no-permissions {}')
#
# 	if [ -n "$choice" ]; then
# 		cd $choice
# 		clear
#
# 		# sparky | clr blackL
#         echo -e "${black}-| ${cyan}${bold}$(\pwd)${reset}${black} |-${reset}"
# 		# eza -la --group-directories-first --icons --grid --no-user --no-filesize
#         lsa
# 		lineacross | clr blackL
# 	fi
# }

# fzf through different neovim configs
# need to set up for my new debian envioronment
# snv() {
# 	# items=("default" "from-scratch" "lazy-nvim" "nv-chad" )
#     items=$(\ls ~/.config/neovim/)
# 	config=$(printf "%s\n" "${items[@]}" | fzf --prompt=" Neovim Config   " --exit-0)
# 	if [[ -z $config ]]; then
# 		# echo "Nothing selected"
# 		return 0
#     else
#         config="neovim/${config}"
# 	fi
# 	NVIM_APPNAME=$config nvim "$@"
# }

# show the list of packages that need this package - depends mpv as example
# depends() {
# 	search=$(echo "$1")
# 	sudo pacman -Sii $search | grep "Required" | sed -e "s/Required By     : //g" | sed -e "s/  /\n/g"
# }

# fast cd - verbose and clear screen
# function d() {
#     # Test for specified dir
#     dir_name=$(get-dir-h "$1")
#     if [[ -z "$dir_name" ]]; then
#         echo -e "Specified Directory ${blue}${1}${reset} does not exist."
#         return 2
#     fi
#
#     dir_path=$(realpath "${dir_name}")
#
# 	choice=$(fdfind . "$dir_path" -H --type d | sed "s|${dir_path}/||" | fzf --border-label=" 󰥨 ${dir_path}/ " --preview "eza --tree -la --icons -F -L=2 --group-directories-first --no-filesize --no-user --no-time --no-permissions {}")
#
# 	if [ -n "$choice" ]; then
# 		cd "${dir_path}/${choice}" || return 2
# 		clear
#
#         dir-overview "${dir_path}/${choice}"
#         echo
#
# 	fi
# }

# Fast cd to my repos
# r() {
# 	choice=$(\ls /home/rc/Repos/ | fzf --header-first --border-label="  Git Repositories " --reverse --preview 'eza --tree -la --icons -F -L=2 --group-directories-first --no-filesize --no-user --no-time --no-permissions {}')
#
#     if [ -n "$choice" ]; then
#         base_dir="/home/rc/Repos/${choice}"
#         cd "${base_dir}" || return 2
#         clear
#
#         dir_number=$(fdfind . "${base_dir}" --type d --max-depth 1 | wc -l)
#         if [[ "$dir_number" -gt 0 ]]; then
#             dir-nav-fzf "${base_dir}"
#         fi
#
#         repo-header
#
#         header_size=$(repo-header | wc -l)
#         extra_lines=$((header_size + 1))
#
#         dir-overview . "${extra_lines}"
#         echo
#     fi
# }


# }}}


# |- Aliases ->

##  TODO: Place shell here


# |- Misc ->

# Vim options - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# vim:fileencoding=utf-8:foldmethod=marker
